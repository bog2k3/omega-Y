#ifndef __CONNECTION_WRAPPER_H__
#define __CONNECTION_WRAPPER_H__

#include <boglfw/net/connection.h>

#include <atomic>

/*
[ConnectionWrapper class]
	* higher level wrapper over net::connection
	* holds metadata about the connection such as
		- isAlive or enum state.
		- ping time
		- peerInfo: { userName, reputation, avatar, UUID} (UUID is randomly generated by the server for each connection;
														   if the same peer reconnects after a disconnect, it will use the UUID
														   to tell the server it's the same dude)
	* provides methods for reading/writing asynchronously from/to the net::connection via a shared worker thread
	* implements negociation protocol and sets a flag upon completion of negociation - this means the connection is ready to be used by the game.
*/

enum class ConnectionState {
	DISCONNECTED,
	IN_PROGRESS,
	NEGOCIATING_PROTOCOL,
	LIVE,
};

class ConnectionWrapper {
public:
	// create a new connection by attempting to connect to the remote host
	ConnectionWrapper(std::string const& host_url, unsigned port, std::string userName);

	// wrap an existing (already established) connection
	explicit ConnectionWrapper(net::connection);

	~ConnectionWrapper();

	ConnectionState state() const { return state_.load(std::memory_order_acquire); }
private:
	net::connection connection_;
	std::atomic<ConnectionState> state_ { ConnectionState::DISCONNECTED };
};

#endif // __CONNECTION_WRAPPER_H__
